"use strict";

<<<<<<< HEAD
const behavior = require("./sinon/behavior");
const createSandbox = require("./sinon/create-sandbox");
const extend = require("./sinon/util/core/extend");
const fakeTimers = require("./sinon/util/fake-timers");
const nise = require("nise");
const Sandbox = require("./sinon/sandbox");
const stub = require("./sinon/stub");
const promise = require("./sinon/promise");

/**
 * @param {object} opts injection point to override the default XHR lib in testing
 * @param {object} opts.sinonXhrLib
 * @returns {object} a configured sandbox
 */
function createApi({ sinonXhrLib }) {
    const apiMethods = {
        createSandbox: createSandbox,
        assert: require("./sinon/assert"),
        match: require("@sinonjs/samsam").createMatcher,
        restoreObject: require("./sinon/restore-object"),

        expectation: require("./sinon/mock-expectation"),
        defaultConfig: require("./sinon/util/core/default-config"),

        // fake timers
        timers: fakeTimers.timers,

        // fake XHR
        xhr: sinonXhrLib.fakeXhr.xhr,
        FakeXMLHttpRequest: sinonXhrLib.fakeXhr.FakeXMLHttpRequest,

        // fake server
        fakeServer: sinonXhrLib.fakeServer,
        fakeServerWithClock: sinonXhrLib.fakeServerWithClock,
        createFakeServer: sinonXhrLib.fakeServer.create.bind(
            sinonXhrLib.fakeServer,
        ),
        createFakeServerWithClock: sinonXhrLib.fakeServerWithClock.create.bind(
            sinonXhrLib.fakeServerWithClock,
        ),

        addBehavior: function (name, fn) {
            behavior.addBehavior(stub, name, fn);
        },

        // fake promise
        promise: promise,
    };

    const sandbox = new Sandbox();
    return extend(sandbox, apiMethods);
}

const api = createApi({ sinonXhrLib: nise });

module.exports = api;

// solely exposed for easier testing
module.exports.createApi = createApi;
=======
var behavior = require("./sinon/behavior");
var createSandbox = require("./sinon/create-sandbox");
var deprecated = require("@sinonjs/commons").deprecated;
var extend = require("./sinon/util/core/extend");
var fakeTimers = require("./sinon/util/fake-timers");
var format = require("./sinon/util/core/format");
var nise = require("nise");
var Sandbox = require("./sinon/sandbox");
var stub = require("./sinon/stub");

var apiMethods = {
    createSandbox: createSandbox,
    assert: require("./sinon/assert"),
    match: require("@sinonjs/samsam").createMatcher,
    spyCall: require("./sinon/call"),

    expectation: require("./sinon/mock-expectation"),
    defaultConfig: require("./sinon/util/core/default-config"),

    setFormatter: format.setFormatter,

    // fake timers
    timers: fakeTimers.timers,

    // fake XHR
    xhr: nise.fakeXhr.xhr,
    FakeXMLHttpRequest: nise.fakeXhr.FakeXMLHttpRequest,

    // fake server
    fakeServer: nise.fakeServer,
    fakeServerWithClock: nise.fakeServerWithClock,
    createFakeServer: nise.fakeServer.create.bind(nise.fakeServer),
    createFakeServerWithClock: nise.fakeServerWithClock.create.bind(nise.fakeServerWithClock),

    addBehavior: function(name, fn) {
        behavior.addBehavior(stub, name, fn);
    }
};

var legacySandboxAPI = {
    sandbox: {
        create: deprecated.wrap(
            createSandbox,
            // eslint-disable-next-line max-len
            "`sandbox.create()` is deprecated. Use default sandbox at `sinon.sandbox` or create new sandboxes with `sinon.createSandbox()`"
        )
    }
};

var sandbox = new Sandbox();

var api = extend(sandbox, legacySandboxAPI, apiMethods);

module.exports = api;
>>>>>>> 8fea50a98e3683e334cf159da2406c53e1f99e99
