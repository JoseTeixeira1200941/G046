@startuml sd

participant "User" as A
participant "ILiftController" as IL
participant "LiftController" as L
participant "ILiftService" as IS
participant "LiftService" as S
participant "ILiftRepo" as IR
participant "LiftRepo" as R
participant "LiftMap" as M
participant "Lift Entity" as E
participant "ConfigFile" as CONF
participant "ILiftPersistence" as IH
participant "LiftPersistence" as H
participant "LiftSchema" as I

A -> IL: send request to createLift(req, res, next)
activate IL

IL -> L: createLift(req, res, next)
activate L

L -> CONF: Injects Service
activate CONF

CONF -> L
deactivate CONF

L -> IS: createLift(req, res, next)
activate IS

IS -> S: createLift(req.body as ILiftDTO)
activate S

S -> M: ToDomain(req.body as ILiftDTO)
activate M

M -> E: .create(ILiftDTO)
activate E

E --> S: createdLift
deactivate E
deactivate M

alt creation successful
    S -> IR: save(createdLift)
    activate IR
    IR -> R: save(createdLift)
    activate R
    R -> M: toPersistence(createdLift)
    activate M
    M --> R : return rawLift
    deactivate M
    R --> I: create(rawLift)
    activate I
    I --> R : return liftDocument
    deactivate I
    R --> IR: saved liftDocument
    deactivate R
    IR --> S: saved liftDocument
    deactivate IR
    
    S -> M: toDTO(createdLift)
    activate M
    M --> S: liftDTOResult
    deactivate M
    S --> IS : liftDTOResult
    IS --> L: Return successful Result with DTO
else creation failed
    S --> IS: Error Result
    IS --> L: Error Result
end

alt LiftService returns a failure Result
    L -> IL: Send response with status 402
    IL -> A: Send response with status 402
else LiftService returns a successful Result
    L -> IL: Send response with status 201 and the liftDTO
    IL -> A: Send response with status 201 and the liftDTO
end

deactivate S
deactivate L

@enduml
