@startuml
actor User
participant "Frontend\n(Angular)" as Frontend
participant "AuthInterceptorService" as AuthInterceptor <<Frontend>>
participant "LocalStorage" as LocalStorage <<Frontend>>
participant "MessageService" as MessageService <<Frontend>>
participant "JWT Authentication Middleware" as JwtAuth <<Backend>>
participant "TaskController" as Controller <<Backend>>
participant "TaskService" as TaskService <<Backend>>
database "MongoDB" as Database <<Database>>

User -> Frontend: Access Approve Task
note right of User: User must be logged in
activate Frontend

Frontend -> AuthInterceptor: Prepare HTTP GET request
activate AuthInterceptor
AuthInterceptor -> LocalStorage: Retrieve JWT Token
activate LocalStorage
LocalStorage --> AuthInterceptor: JWT Token
deactivate LocalStorage

AuthInterceptor -> JwtAuth: Forward request with Authorization header
deactivate AuthInterceptor
activate JwtAuth

alt JWT Token Valid
    JwtAuth -> Controller: Forward Validated Request
    deactivate JwtAuth
    activate Controller

    Controller -> TaskService: GetTasksNonAprovedAsync()
    activate TaskService

    TaskService -> Database: GetAllNonApproved()
    activate Database

    alt Backend Error
        Database -> TaskService: Error Response
        deactivate Database
        TaskService --> Controller: Error Response
        deactivate TaskService

        Controller --> JwtAuth: Error Response
        deactivate Controller

        JwtAuth --> Frontend: Error Response
        deactivate JwtAuth

        Frontend -> MessageService: "Server error occurred"
        activate MessageService
        MessageService -> Frontend: Display error message
        deactivate MessageService
    else No Backend Error

        activate Database
        Database -> TaskService: List with non approved tasks

        activate TaskService
        deactivate Database
        TaskService --> Controller: Non-Approved Tasks
        activate Controller

        deactivate TaskService

        Controller --> JwtAuth: Task Data
        deactivate Controller

        JwtAuth --> Frontend: Task Data
        deactivate JwtAuth

        Frontend -> MessageService: "Tasks loaded successfully"
        activate MessageService
        MessageService -> Frontend: Display tasks list
        deactivate MessageService
        User -> Frontend: Approve or Denny a task

        Frontend -> AuthInterceptor: Prepare HTTP PATCH request
        activate AuthInterceptor
        AuthInterceptor -> LocalStorage: Retrieve JWT Token
        activate LocalStorage
        LocalStorage --> AuthInterceptor: JWT Token
        deactivate LocalStorage

        AuthInterceptor -> JwtAuth: Forward request with Authorization header
        deactivate AuthInterceptor
        activate JwtAuth

       
            JwtAuth -> Controller: Forward Validated Request
            deactivate JwtAuth
            activate Controller

            Controller -> TaskService: Approve or Dany taks method
            activate TaskService

            TaskService -> Database: Change the task status
            activate Database
            Database -> TaskService: Success Message
            deactivate Database
            TaskService -> Controller: Sucess Message
            deactivate TaskService
            Controller -> JwtAuth: Sucess Message
            deactivate Controller
            JwtAuth --> Frontend: Sucess Message
            deactivate JwtAuth

            Frontend -> MessageService: "Tasks Approved or Denied"
            activate MessageService
            MessageService -> Frontend: Display Message
            deactivate MessageService

    else JWT Token Invalid
        JwtAuth --> Frontend: Unauthorized Response
        deactivate JwtAuth

        Frontend -> MessageService: "Authentication error"
        activate MessageService
        MessageService -> Frontend: Display authentication error message
        deactivate MessageService
    end

    deactivate Frontend
    @enduml
