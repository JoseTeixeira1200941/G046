@startuml

!define RECTANGLE class

package "Front-End Application" {
    RECTANGLE ComponentA {
        +specificRequestA()
    }
    RECTANGLE ComponentB {
        +specificRequestB()
    }
    RECTANGLE ComponentC {
        +specificRequestC()
    }
    RECTANGLE RoleBasedRouter {
        +checkAccess(component, userRole): boolean // Determines access to components
    }
    RECTANGLE HTTPInterceptor {
        +interceptRequest(): append JWT
    }
    RECTANGLE UserInterface {
        +login(username, password)
        +register(firstName, lastName, email, password)
        +receiveData()
    }
}

package "ASP NET Core C# Authentication Service" {
    RECTANGLE UserController {
        +login(email, password): JWT
        +register(firstName, lastName, email, password): boolean
    }
    RECTANGLE UserService {
        +validateCredentials(email, password): boolean
        +createUser(firstName, lastName, email, password): boolean
        +isValidEmail(email): boolean
        +isStrongPassword(password): boolean
    }
    RECTANGLE JWTService {
        +createToken(user): JWT
        +validateToken(token): boolean
    }
}

package "Nodejs Backend Service" {
    RECTANGLE JWTMiddleware {
        +validateJWT(token): userRole
    }
    RECTANGLE ResourceController {
        +handleRequest()
        +accessProtectedResources()
    }
}

database "Database" {
    folder "User Credentials" {
    }
    folder "Other Data" {
    }
}
UserInterface --> RoleBasedRouter
RoleBasedRouter --> ComponentA
RoleBasedRouter --> ComponentB
RoleBasedRouter --> ComponentC
ComponentA --> HTTPInterceptor : intercepts all requests
ComponentB --> HTTPInterceptor : intercepts all requests
ComponentC --> HTTPInterceptor : intercepts all requests
UserInterface --> UserController : requests login/register
UserController --> UserService : validate & create new user
UserService --> Database : store/retrieve user data
UserController --> JWTService : create JWT
JWTService --> Database : retrieve signing key/user claims
HTTPInterceptor --> JWTMiddleware : sends requests with JWT
JWTMiddleware --> ResourceController : on valid JWT
JWTMiddleware ..> JWTService : share JWT secret key
ResourceController ..> Database : access data

@enduml
